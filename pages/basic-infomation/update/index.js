/* eslint-disable max-lines */
import {Grid, Typography, Button, Box, TextField, CircularProgress, Icon, FormControl, NativeSelect} from '@material-ui/core';
import {makeStyles} from '@material-ui/core/styles';
import Head from 'next/head';
import {useForm, Controller} from 'react-hook-form';
import {ErrorMessage} from '@hookform/error-message';
import React, {useState} from 'react';
import {
  KeyboardDatePicker,
  MuiPickersUtilsProvider,
} from '@material-ui/pickers';
import moment from 'moment';
import DateFnsUtils from '@date-io/date-fns';
import jaLocale from 'date-fns/locale/ja';

import {Footer} from '../../../components/Layout/Footer';
import {Header} from '../../../components/Layout/Header';
import {ContentBlock} from '../../../components/ContentBlock';
import {StyledForm} from '../../../components/StyledForm';

const useStyles = makeStyles((theme) => ({
  block: {
    width: '100%',
    display: 'flex',
    padding: '1.25rem 0',
    borderBottom: `1px solid ${theme.border.default}`,
    fontSize: '1.125rem',
    lineHeight: '2.188rem',
    color: 'black',
    '& h4': {
      margin: '0rem',
    },
    '&:last-child': {
      border: 'none',
    },
  },

  title: {
    fontStyle: 'normal',
    fontWeight: 'bold',
    fontSize: '1.25rem',
    lineHeight: '2.5rem',
  },

  textDisable: {
    color: theme.textDisable.default,
  },
  btnSubmit: {
    background: theme.palette.buttonLogin.default,
    boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.15)',
    borderRadius: '45px',
    color: theme.palette.background.default,
    padding: '0.5rem 2rem',
    '&:hover': {
      background: theme.palette.buttonLogin.default,
      color: theme.palette.background.default,
    },
  },
  blockPassword: {
    display: 'flex',
    alignItems: 'center',
  },

  formControlLabel: {
    fontWeight: 600,
  },
}));

const info = {
  username: 'はなこ',
  email: 'bh@gmail.com',
  password: '＊＊＊＊＊＊＊＊',
  fullName: '',
  alphabet: '',
  gender: '',
  birthday: '',
  address: '',
};

export default function BasicInfomationUpdate() {
  const classes = useStyles();
  const {control, handleSubmit, formState: {errors}} = useForm({criteriaMode: 'all'});
  const [loading, setLoading] = useState(false);

  const onSubmit = async () => {
    setLoading(true);
  };

  return (
    <div className={'page'}>
      <Head>
        <title>{'Order Detail - BH_EC'}</title>

        <meta
          name='description'
          content='Generated by NextJs'
        />
      </Head>

      <Header showMainMenu={false}/>

      <div className='content'>
        <ContentBlock
          title={'基本情報'}
        >
          <Grid
            container={true}
            spacing={3}
          >
            <StyledForm
              onSubmit={handleSubmit(onSubmit)}
              style={{width: '100%'}}
            >
              <MuiPickersUtilsProvider
                utils={DateFnsUtils}
                locale={jaLocale}
              >
                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'注文ニックネーム番号'}</Typography>
                  </Grid>
                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='username'
                      control={control}
                      defaultValue={info.username}
                      render={({field}) => (
                        <TextField
                          id='username'
                          label='注文ニックネーム番号'
                          variant='outlined'
                          InputLabelProps={{shrink: false}}
                          {...field}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='username'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>

                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'ログインID'}</Typography>
                  </Grid>
                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='email'
                      control={control}
                      defaultValue={info.email}
                      render={({field}) => (
                        <TextField
                          id='email'
                          label='ログインID'
                          variant='outlined'
                          InputLabelProps={{shrink: false}}
                          {...field}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='email'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>

                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'パスワード'}</Typography>
                  </Grid>
                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <label
                      htmlFor='password'
                      className='formControlLabel'
                    >
                      {'現在のパスワード'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <Controller
                      name='password'
                      control={control}
                      defaultValue={info.password}
                      render={({field}) => (
                        <div className={classes.blockPassword}>
                          <TextField
                            id='password'
                            label='パスワード'
                            variant='outlined'
                            InputLabelProps={{shrink: false}}
                            {...field}
                            style={{marginRight: '1rem'}}
                          />
                          <Icon>{'visibility'}</Icon>
                        </div>
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='password'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                    <label
                      htmlFor='other_name'
                      className='formControlLabel'
                    >
                      {'新しいパスワード'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <Controller
                      name='confirmPassword'
                      control={control}
                      defaultValue={info.confirmPassword}
                      render={({field}) => (
                        <div className={classes.blockPassword}>
                          <TextField
                            id='confirmPassword'
                            label='パスワード'
                            variant='outlined'
                            InputLabelProps={{shrink: false}}
                            {...field}
                            style={{marginRight: '1rem'}}
                          />
                          <Icon>{'visibility'}</Icon>
                        </div>
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='confirmPassword'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>

                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'氏名'}</Typography>
                  </Grid>
                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='fullName'
                      control={control}
                      defaultValue={info.fullName}
                      render={({field}) => (
                        <TextField
                          id='fullName'
                          label='パスワード'
                          variant='outlined'
                          InputLabelProps={{shrink: false}}
                          {...field}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='fullName'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>

                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'ひらがな'}</Typography>
                  </Grid>
                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='alphabet'
                      control={control}
                      defaultValue={info.alphabet}
                      render={({field}) => (
                        <TextField
                          id='alphabet'
                          label='パスワード'
                          variant='outlined'
                          InputLabelProps={{shrink: false}}
                          {...field}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='alphabet'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>

                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'性別'}</Typography>
                  </Grid>

                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='gender'
                      control={control}
                      defaultValue={info.gender}
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <FormControl>
                          <NativeSelect
                            className={errors.city ? 'selectBoxError' : ''}
                            name={name}
                            value={value}
                            inputRef={ref}
                            onChange={onChange}
                          >
                            <option
                              value={'女性'}
                            >{'女性'}</option>
                            <option
                              value={'男性'}
                            >{'男性'}</option>
                            <option
                              value={'他'}
                            >{'他'}</option>
                          </NativeSelect>
                        </FormControl>
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='gender'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>
                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'生年月日'}</Typography>
                  </Grid>

                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <Controller
                      name='birthday'
                      control={control}
                      defaultValue={null}
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {value, onChange}}) => (
                        <KeyboardDatePicker
                          disableToolbar={true}
                          variant='inline'
                          format='yyyy/MM/dd'
                          id='birthday'
                          label='YYYY/MM/DD'
                          InputLabelProps={{shrink: false}}
                          value={value}
                          onChange={(date) => {
                            const formatedDate = moment(date).format('YYYY/MM/DD');
                            onChange(formatedDate);
                          }}
                          autoOk={true}
                          error={Boolean(errors.birthday)}
                          KeyboardButtonProps={{
                            'aria-label': 'change date',
                          }}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='birthday'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>
                <div className={classes.block}>
                  <Grid
                    item={true}
                    xs={12}
                    sm={4}
                    md={4}
                  >
                    <Typography
                      variant={'h4'}
                      className={classes.title}
                    >{'住所'}</Typography>
                  </Grid>

                  <Grid
                    item={true}
                    xs={12}
                    sm={8}
                    md={8}
                  >
                    <label
                      htmlFor='postal_code'
                      className={classes.formControlLabel}
                    >
                      {'郵便番号'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <div>
                      {'半角数字でご入力ください。'}
                    </div>
                    <Controller
                      name='postal_code'
                      control={control}
                      defaultValue=''
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <TextField
                          id='postal_code'
                          variant='outlined'
                          error={Boolean(errors.postal_code)}
                          InputLabelProps={{shrink: false}}
                          name={name}
                          label={'郵便番号'}
                          value={value}
                          inputRef={ref}
                          onChange={onChange}
                          style={{marginBottom: '1rem'}}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='postal_code'
                      style={{marginBottom: '1rem'}}
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                    <label
                      htmlFor='prefectures'
                      className={classes.formControlLabel}
                    >
                      {'都道府県'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <Controller
                      name='prefectures'
                      control={control}
                      defaultValue=''
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <FormControl>
                          <NativeSelect
                            className={errors.city ? 'selectBoxError' : ''}
                            name={name}
                            value={value}
                            style={{marginBottom: '1rem'}}
                            inputRef={ref}
                            onChange={onChange}
                          >
                            <option
                              value={'女性'}
                            >{'女性'}</option>
                            <option
                              value={'男性'}
                            >{'男性'}</option>
                            <option
                              value={'他'}
                            >{'他'}</option>
                          </NativeSelect>
                        </FormControl>
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='prefectures'
                      style={{marginBottom: '1rem'}}
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                    <label
                      htmlFor='municipality'
                      className={classes.formControlLabel}
                    >
                      {'市区町村'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <Controller
                      name='municipality'
                      control={control}
                      defaultValue=''
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <TextField
                          id='municipality'
                          variant='outlined'
                          error={Boolean(errors.municipality)}
                          InputLabelProps={{shrink: false}}
                          name={name}
                          value={value}
                          style={{marginBottom: '1rem'}}
                          label={'市区町村'}
                          inputRef={ref}
                          onChange={onChange}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='municipality'
                      style={{marginBottom: '1rem'}}
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                    <label
                      htmlFor='address'
                      className={classes.formControlLabel}
                    >
                      {'番地・マンション名'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <Controller
                      name='address'
                      control={control}
                      defaultValue=''
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <TextField
                          id='address'
                          variant='outlined'
                          error={Boolean(errors.address)}
                          InputLabelProps={{shrink: false}}
                          name={name}
                          style={{marginBottom: '1rem'}}
                          label={'番地・マンション名'}
                          value={value}
                          inputRef={ref}
                          onChange={onChange}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      name='address'
                      style={{marginBottom: '1rem'}}
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                    <label
                      htmlFor='phone_number'
                      className={classes.formControlLabel}
                    >
                      {'電話番号'}
                      <span className='formControlRequired'>{'*'}</span>
                    </label>
                    <div>{'配送時にご連絡させていただく事があります。'}</div>
                    <Controller
                      name='phone_number'
                      control={control}
                      defaultValue=''
                      rules={{required: 'この入力は必須です。'}}
                      render={({field: {name, value, ref, onChange}}) => (
                        <TextField
                          id='phone_number'
                          variant='outlined'
                          error={Boolean(errors.phone_number)}
                          InputLabelProps={{shrink: false}}
                          name={name}
                          style={{marginBottom: '1rem'}}
                          label={'電話番号'}
                          value={value}
                          inputRef={ref}
                          onChange={onChange}
                        />
                      )}
                    />
                    <ErrorMessage
                      errors={errors}
                      style={{marginBottom: '1rem'}}
                      name='phone_number'
                      render={({messages}) => {
                        return messages ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className='inputErrorText'
                            key={type}
                          >{`⚠ ${message}`}</p>
                        )) : null;
                      }}
                    />
                  </Grid>
                </div>
              </MuiPickersUtilsProvider>
            </StyledForm>
          </Grid>
          <Box
            textAlign='center'
            mt={5}
          >
            <Button
              variant='pill'
              customColor='red'
              customSize='extraLarge'
              type='submit'
              className={classes.btnSubmit}
            >
              {'基本情報を編集'}
              {loading ? (
                <CircularProgress
                  size={24}
                />
              ) : null}
            </Button>
          </Box>
        </ContentBlock>
      </div>

      <Footer/>
    </div >
  );
}
